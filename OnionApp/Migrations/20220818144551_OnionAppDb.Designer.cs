// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace OnionApp.Migrations
{
    [DbContext(typeof(OnionDbContext))]
    [Migration("20220818144551_OnionAppDb")]
    partial class OnionAppDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Domains.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DAL.Domains.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeleteStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReciverID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReciverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Domains.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980"),
                            ConcurrencyStamp = "850dd208-2d91-477f-8b8a-9eb1adb6b9df",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("cde51b02-01d1-4b64-b208-b1cc16cc160d"),
                            ConcurrencyStamp = "cae55586-6822-4351-8613-66b3bb4cf76f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DAL.Domains.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("288752a5-cb3f-4e10-a03b-08247674a7ae"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b10fde6b-dd67-465d-86b1-461acd1b272c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mishka",
                            IsEnabled = true,
                            LastName = "Moya",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECSE3oJfOsfCp8rFhpmwW4tDn/qQQ2PFi1l2GUaAucdyVDEDhXsIOaiFS1c43oB2Lg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("1efeab64-374f-4360-b402-43972c7842bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ec1be6b-26e4-489d-a9d7-ea21c6f97123",
                            Email = "vaga@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kunjut",
                            IsEnabled = true,
                            LastName = "Araxevich",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGnjfgqcwkDiLzoIFboU7tECjqfkus+tKh2sALb8iBM5D8gOhwsb1IvTw5JcsomJg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("a6104741-74ef-42b9-8b60-3e0fbc160870"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cbddadb-752c-4669-b4e2-938b541d65d2",
                            Email = "vagif@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vaqif",
                            IsEnabled = true,
                            LastName = "Qurbanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "VAGA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJvcmayCqdbva6g8T8rdkbpYOIQUKzr9lY9ZHeb1l6T4EE48gcOjzociM7gsQVChw==",
                            PhoneNumber = "123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "vaga"
                        },
                        new
                        {
                            Id = new Guid("44d6b437-2798-4cc6-9cc2-42f4bdbd5ad9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5957309e-9f55-4dd7-8da2-9f19aa30a089",
                            Email = "valeh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Valeh",
                            IsEnabled = true,
                            LastName = "Gehramanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "VALEH",
                            PasswordHash = "AQAAAAEAACcQAAAAENyQX71iQ3RHKNcXr4iPtY2HzkTxvCUvtvxRX3XNb3zm1c5UBb1VEEwTjltxQapr6Q==",
                            PhoneNumber = "1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valeh"
                        },
                        new
                        {
                            Id = new Guid("4fe2aa35-3077-4c41-8e6c-91c73a1d3005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b480386b-f905-405b-aab8-b3f8726096f9",
                            Email = "tural@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tural",
                            IsEnabled = true,
                            LastName = "Gehramanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "TURAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbkELL0rKUW/9GsjKny/1/r+to0BEECi7SgAYAvyvUvjypS5r1mRWAkTsf/I8JdYQ==",
                            PhoneNumber = "12345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tural"
                        },
                        new
                        {
                            Id = new Guid("04f56b24-dddf-4c8f-af96-814114406f96"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1396110d-c0ac-4b6a-aa1b-7e3d5f219c3e",
                            Email = "zeka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Zeka",
                            IsEnabled = true,
                            LastName = "Qasimli",
                            LockoutEnabled = false,
                            NormalizedUserName = "ZEKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIqVq1AY+CSPHHBVmvIJm/knkcc8OTQ7ZIphrmIYRIxZK5EqIgDZjwXFV8TCvVQfaA==",
                            PhoneNumber = "123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "zeka"
                        },
                        new
                        {
                            Id = new Guid("fa9ff1a5-87c7-46dd-9876-a22206fc804d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0782c9b-40d9-430e-9833-4f6c58dd15c6",
                            Email = "asif@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Asif",
                            IsEnabled = true,
                            LastName = "Qurbanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "ASIF",
                            PasswordHash = "AQAAAAEAACcQAAAAECtJiDjkDjBU9xhBsXNj4sqeR3Aga0h0vlYjb0ZqYLgBFahc+lsMs9WlnnsMAp5Q+Q==",
                            PhoneNumber = "123321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "asif"
                        },
                        new
                        {
                            Id = new Guid("bcdf7c58-831f-405d-8b81-ae98726e4929"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b5440f-ebe0-4b51-9c30-e9135c5a385f",
                            Email = "akif@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Akif",
                            IsEnabled = true,
                            LastName = "Qurbanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "AKIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0ZShIC8GThGsoPgeez3UrmEXqWkjUuRVwDIGS0znDxhZ41AWvL84BUta/vyTmzXA==",
                            PhoneNumber = "1232117",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "akif"
                        },
                        new
                        {
                            Id = new Guid("aac96843-4857-4fbe-9f8e-492a51030e8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20cf4074-422c-40a8-bac9-e807c48230ea",
                            Email = "kolya@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kovalev",
                            IsEnabled = true,
                            LastName = "Chipiqa",
                            LockoutEnabled = false,
                            NormalizedUserName = "KOLYA",
                            PasswordHash = "AQAAAAEAACcQAAAAECnqEAOnNFx9Bb81pSyV5b5YlKSYmrBixpHX2ec8xt+PM6+8AzXNvjGJZGhTADilmw==",
                            PhoneNumber = "122223",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "kolya"
                        },
                        new
                        {
                            Id = new Guid("e35e31ad-3a7d-4576-ae4a-19ff275d7840"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "546c1b19-c94d-4c5e-97f4-7c899f0a864b",
                            Email = "mishkin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kovalev",
                            IsEnabled = true,
                            LastName = "Mishkin",
                            LockoutEnabled = false,
                            NormalizedUserName = "KOLYA_MISHKIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPUAAkPV+jZUikiuLe8+X5P/qQlZHdnwReFJEbF9KNa8kyc0AsEk4qor2s6vPbHsfg==",
                            PhoneNumber = "1231112",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "kolya_mishkin"
                        },
                        new
                        {
                            Id = new Guid("6543c1d3-2277-4628-9c51-df6989985106"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13872ff1-d1ef-4faa-abc6-96fe6c4342d6",
                            Email = "nastya@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nastya",
                            IsEnabled = true,
                            LastName = "Kulikova",
                            LockoutEnabled = false,
                            NormalizedUserName = "NASTYA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZdi6BJrAhKfEXMnIbSjG/BKS5mcMXTCKAgl+n10LLvnV9iSFAUWwaLF40jDW2yvQ==",
                            PhoneNumber = "123333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nastya"
                        },
                        new
                        {
                            Id = new Guid("4c26e97b-7a06-4e70-b5eb-23b3810e50c2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3166b869-1459-4073-85d6-d003b74ca07e",
                            Email = "zena@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Zena",
                            IsEnabled = true,
                            LastName = "Kulikova",
                            LockoutEnabled = false,
                            NormalizedUserName = "ZENA",
                            PasswordHash = "AQAAAAEAACcQAAAAENd/bSEcSIopXp8AioERZQX1WjiABeCUbcO9Ozt5tRwLt+zdfHI6DyS0UKpZl1iEjg==",
                            PhoneNumber = "333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "zena"
                        },
                        new
                        {
                            Id = new Guid("feb62675-d39b-4978-a617-6f5ecd995f40"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b9b5a3b-9698-41b1-bbce-d8a2f4e6bb6e",
                            Email = "pasha@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pasha",
                            IsEnabled = true,
                            LastName = "Radeon",
                            LockoutEnabled = false,
                            NormalizedUserName = "PASHA",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/EpFmp3qjjpaAbc1x962s83azlmNang6bKnr4KKJZuONJYTKF2OyRIT8Qvy0yJAQ==",
                            PhoneNumber = "12321234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "pasha"
                        },
                        new
                        {
                            Id = new Guid("8e7ffaa0-a720-44c3-9e67-aab3c4fd48a9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c635944-3726-45c6-b4ff-db8439d4ab0a",
                            Email = "pashkeyivich@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pasha",
                            IsEnabled = true,
                            LastName = "Radeon",
                            LockoutEnabled = false,
                            NormalizedUserName = "PASHKEYIVICH",
                            PasswordHash = "AQAAAAEAACcQAAAAEHC/7tPt1rC425J+RqMu9HNbbSX2vuzKoMsOLMdbDLDkiMxIG3aOXULqpJOqOG1Tjg==",
                            PhoneNumber = "12311657",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "pashkeyivich"
                        },
                        new
                        {
                            Id = new Guid("c3d03140-4022-45e3-8350-6d60427153d3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a082b5f5-da84-4514-98c1-2c1d1f01611f",
                            Email = "vagifGurbanov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vaqif",
                            IsEnabled = true,
                            LastName = "Qurbanov",
                            LockoutEnabled = false,
                            NormalizedUserName = "VAQIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEF3uqyz007g/KjFfiMaNGYRsZTRczh2UkXsm+68j5IBJrMfXHtl7Z9mRqEg4fDnWUw==",
                            PhoneNumber = "123333999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "vaga100"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1efeab64-374f-4360-b402-43972c7842bd"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("a6104741-74ef-42b9-8b60-3e0fbc160870"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("44d6b437-2798-4cc6-9cc2-42f4bdbd5ad9"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("4fe2aa35-3077-4c41-8e6c-91c73a1d3005"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("04f56b24-dddf-4c8f-af96-814114406f96"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("fa9ff1a5-87c7-46dd-9876-a22206fc804d"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("bcdf7c58-831f-405d-8b81-ae98726e4929"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("aac96843-4857-4fbe-9f8e-492a51030e8e"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("e35e31ad-3a7d-4576-ae4a-19ff275d7840"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("6543c1d3-2277-4628-9c51-df6989985106"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("4c26e97b-7a06-4e70-b5eb-23b3810e50c2"),
                            RoleId = new Guid("eaaa847c-d459-43f3-be8a-2c017325a980")
                        },
                        new
                        {
                            UserId = new Guid("feb62675-d39b-4978-a617-6f5ecd995f40"),
                            RoleId = new Guid("cde51b02-01d1-4b64-b208-b1cc16cc160d")
                        },
                        new
                        {
                            UserId = new Guid("8e7ffaa0-a720-44c3-9e67-aab3c4fd48a9"),
                            RoleId = new Guid("cde51b02-01d1-4b64-b208-b1cc16cc160d")
                        },
                        new
                        {
                            UserId = new Guid("c3d03140-4022-45e3-8350-6d60427153d3"),
                            RoleId = new Guid("cde51b02-01d1-4b64-b208-b1cc16cc160d")
                        },
                        new
                        {
                            UserId = new Guid("288752a5-cb3f-4e10-a03b-08247674a7ae"),
                            RoleId = new Guid("cde51b02-01d1-4b64-b208-b1cc16cc160d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Domains.Image", b =>
                {
                    b.HasOne("DAL.Domains.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("DAL.Domains.Image", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Domains.Message", b =>
                {
                    b.HasOne("DAL.Domains.User", "Reciver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReciverID");

                    b.HasOne("DAL.Domains.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID");

                    b.Navigation("Reciver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Domains.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DAL.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DAL.Domains.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DAL.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Domains.User", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
